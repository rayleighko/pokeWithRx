{"version":3,"sources":["apis/HttpClient.ts","components/Loading.tsx","components/Pokemon.tsx","components/Pokemons.tsx","components/PokeBook.tsx","App.tsx","index.tsx"],"names":["url","headers","request","options","a","axios","path","status","statusText","data","isError","json","errorHandler","successHandler","Error","this","Headers","Accept","Loading","style","width","lineHeight","margin","textAlign","align","tip","Meta","Card","Pokemon","React","useState","name","sprites","front_default","pokemon","setPokemon","useEffect","fetchPokemon","HttpClient","loading","Boolean","cover","alt","src","actions","SettingOutlined","key","EditOutlined","EllipsisOutlined","title","description","Pokemons","pokemons","justify","map","short","uuid","PokeBookWrapper","styled","Col","PokeBook","total","current","nextUrl","prevUrl","state","setState","useLayoutEffect","fetchPokemons","results","count","next","previous","defaultCurrent","onChange","page","showSizeChanger","AppWrapper","Row","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4a8f3713.chunk.js","sourcesContent":["import axios, { AxiosRequestConfig, AxiosResponse } from \"axios\";\r\n\r\ninterface RequestOptions extends AxiosRequestConfig {\r\n    url?: string;\r\n    path?: string;\r\n}\r\n\r\nclass HttpClient {\r\n    private url: string\r\n    private headers: Headers\r\n\r\n    constructor() {\r\n        this.url = ''\r\n        this.headers = new Headers({ Accept: \"application/json\" });\r\n    }\r\n\r\n    public request = async (options: RequestOptions) => {\r\n        try {\r\n            if (options.url) {\r\n                this.url = options.url\r\n            }\r\n\r\n            const { status = 200, statusText, data }: AxiosResponse = await axios({\r\n                ...options,\r\n                url: options.path ? `${this.url}/${options.path}` : this.url,\r\n                headers: this.headers,\r\n            });\r\n\r\n            const isError = status < 200 || status >= 300;\r\n\r\n            return { status, json: isError ? this.errorHandler(statusText) : data };\r\n        } catch (err) {\r\n            return { status: 500, json: this.errorHandler(err) }\r\n        }\r\n    }\r\n\r\n    private successHandler = () => {\r\n\r\n    }\r\n\r\n    private errorHandler = (statusText: string) => {\r\n        throw new Error(statusText);\r\n    }\r\n}\r\n\r\nexport default new HttpClient()","import React from 'react'\r\nimport { Spin, Space } from 'antd';\r\n\r\nconst Loading = () => {\r\n    return (\r\n        <div style={{ width: '300px', lineHeight: '300px', margin: '0 auto', textAlign: 'center' }}>\r\n            <Space align=\"center\">\r\n                <Spin tip=\"Loading...\">\r\n                </Spin>\r\n            </Space>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Loading","import React from 'react'\r\nimport { Card, Avatar } from 'antd';\r\nimport { EditOutlined, EllipsisOutlined, SettingOutlined } from '@ant-design/icons';\r\n\r\nimport HttpClient from '../apis/HttpClient'\r\nimport * as pokemonTypes from '../models/pokemon'\r\n\r\nimport Loading from './Loading'\r\n\r\nconst { Meta } = Card;\r\n\r\nconst Pokemon = ({ url }: React.PropsWithChildren<pokemonTypes.Pokemon>) => {\r\n    const [pokemon, setPokemon] = React.useState<pokemonTypes.Pokemon>({\r\n        url: '',\r\n        name: '',\r\n        sprites: {\r\n            front_default: ''\r\n        }\r\n    })\r\n    React.useEffect(() => {\r\n        fetchPokemon()\r\n\r\n        return () => {\r\n            setPokemon({\r\n                url: '',\r\n                name: '',\r\n                sprites: {\r\n                    front_default: ''\r\n                }\r\n            })\r\n        }\r\n    }, [])\r\n\r\n    const fetchPokemon = async () => {\r\n        const { json } = await HttpClient.request({ url })\r\n\r\n        setPokemon(json)\r\n    }\r\n\r\n    return (\r\n        <Card\r\n            style={{ width: 300, margin: 16 }}\r\n            loading={Boolean(!pokemon)}\r\n            cover={!pokemon ?\r\n                <Loading /> :\r\n                <img\r\n                    alt={pokemon?.name}\r\n                    src={pokemon?.sprites?.front_default}\r\n                />\r\n            }\r\n            actions={[\r\n                <SettingOutlined key=\"setting\" />,\r\n                <EditOutlined key=\"edit\" />,\r\n                <EllipsisOutlined key=\"ellipsis\" />,\r\n            ]}\r\n        >\r\n            <Meta\r\n                title={pokemon?.name}\r\n                description=\"This is the description\"\r\n            />\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default Pokemon","import React from 'react'\r\nimport short from 'short-uuid'\r\nimport { Row, Col } from 'antd'\r\n\r\nimport HttpClient from '../apis/HttpClient'\r\nimport * as models from '../models/pokemon'\r\nimport Pokemon from './Pokemon'\r\n\r\nconst Pokemons = ({ pokemons, }: React.PropsWithChildren<{ pokemons: models.Pokemons }>) => {\r\n    // const Pokemons = ({ pokemons }: any) => {\r\n    return (\r\n        <Row justify=\"center\">\r\n            {pokemons?.map(({ url }) => (\r\n                <Col key={short.uuid()}>\r\n                    <Pokemon url={url} />\r\n                </Col>\r\n            ))}\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default Pokemons","import React from 'react'\r\n\r\nimport { Pagination } from 'antd';\r\nimport { Col } from 'antd'\r\nimport styled from 'styled-components'\r\n\r\nimport HttpClient from '../apis/HttpClient'\r\nimport Pokemons from './Pokemons'\r\nimport * as models from 'models/pokemon'\r\n\r\nconst PokeBookWrapper = styled(Col)`\r\nmargin: 0 auto;\r\n`\r\n\r\nconst PokeBook = () => {\r\n    const [state, setState] = React.useState<{\r\n        total: number,\r\n        current: number,\r\n        pokemons: models.Pokemons,\r\n        nextUrl: string,\r\n        prevUrl: string,\r\n    }>({\r\n        total: 0,\r\n        current: 1,\r\n        pokemons: [],\r\n        nextUrl: '',\r\n        prevUrl: ''\r\n    })\r\n\r\n    React.useLayoutEffect(() => {\r\n        fetchPokemons({ url: 'https://pokeapi.co/api/v2/pokemon' })\r\n\r\n        return () => {\r\n            setState({\r\n                total: 0,\r\n                current: 1,\r\n                pokemons: [],\r\n                nextUrl: '',\r\n                prevUrl: ''\r\n            })\r\n        }\r\n    }, [])\r\n\r\n    // React.useEffect(() => {\r\n    //     fetchPokemons({ url: 'https://pokeapi.co/api/v2/pokemon' })\r\n    // }, [state.current])\r\n\r\n    const fetchPokemons = async ({ url }: { url: string }) => {\r\n        const { json } = await HttpClient.request({ url })\r\n\r\n        setState({\r\n            ...state,\r\n            pokemons: json.results,\r\n            total: json.count,\r\n            nextUrl: json.next,\r\n            prevUrl: json.previous\r\n        })\r\n    }\r\n\r\n    const handleChange = (page: number) => {\r\n        const perPage = 20;\r\n        const offset = ((page - 1) * perPage)\r\n        const limit = perPage\r\n        fetchPokemons({ url: `https://pokeapi.co/api/v2/pokemon?offset=${offset}&limit=${limit}` })\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <PokeBookWrapper>\r\n                <Pokemons pokemons={state.pokemons} />\r\n            </PokeBookWrapper>\r\n            <PokeBookWrapper>\r\n                <Pagination defaultCurrent={1} total={state.total} onChange={handleChange} showSizeChanger={false} />\r\n            </PokeBookWrapper>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default PokeBook","import React from 'react';\nimport styled from 'styled-components'\nimport { Row } from 'antd'\n\nimport PokeBook from './components/PokeBook'\n\nimport 'antd/dist/antd.css'\n\nconst AppWrapper = styled(Row)`\n  min-width: 360px\n  max-width: 1440px\n`\n\nconst App = () => {\n  return (\n    <AppWrapper>\n      <PokeBook />\n    </AppWrapper>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root')\n);\n"],"sourceRoot":""}