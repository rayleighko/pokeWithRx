{"version":3,"sources":["apis/HttpClient.ts","components/Loading.tsx","components/Pokemon.tsx","components/PokemonList.tsx","App.tsx","index.tsx"],"names":["url","headers","request","options","a","axios","path","status","statusText","data","isError","json","errorHandler","successHandler","Error","this","Headers","Accept","Loading","style","width","lineHeight","margin","textAlign","align","tip","Meta","Card","Pokemon","React","useState","pokemon","setPokemon","useEffect","fetchPokemon","HttpClient","console","log","loading","Boolean","cover","alt","name","src","sprites","front_default","actions","SettingOutlined","key","EditOutlined","EllipsisOutlined","title","description","PokemonList","pokemons","setPokemons","fetchPokemons","justify","results","map","short","uuid","AppWrapper","styled","Row","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0SA6Ce,MAlCX,aAAe,IAAD,gCAHNA,SAGM,OAFNC,aAEM,OAKPC,QALO,uCAKG,WAAOC,GAAP,yBAAAC,EAAA,sEAELD,EAAQH,MACR,EAAKA,IAAMG,EAAQH,KAHd,SAMuDK,IAAM,2BAC/DF,GAD8D,IAEjEH,IAAKG,EAAQG,KAAR,UAAkB,EAAKN,IAAvB,YAA8BG,EAAQG,MAAS,EAAKN,IACzDC,QAAS,EAAKA,WATT,2BAMDM,cANC,MAMQ,IANR,EAMaC,EANb,EAMaA,WAAYC,EANzB,EAMyBA,KAM5BC,EAAUH,EAAS,KAAOA,GAAU,IAZjC,kBAcF,CAAEA,SAAQI,KAAMD,EAAU,EAAKE,aAAaJ,GAAcC,IAdxD,2DAgBF,CAAEF,OAAQ,IAAKI,KAAM,EAAKC,aAAL,QAhBnB,0DALH,2DAyBNC,eAAiB,aAzBX,KA6BND,aAAe,SAACJ,GACpB,MAAM,IAAIM,MAAMN,IA7BhBO,KAAKf,IAAM,GACXe,KAAKd,QAAU,IAAIe,QAAQ,CAAEC,OAAQ,sB,sDCC9BC,EAXC,WACZ,OACI,yBAAKC,MAAO,CAAEC,MAAO,QAASC,WAAY,QAASC,OAAQ,SAAUC,UAAW,WAC5E,kBAAC,IAAD,CAAOC,MAAM,UACT,kBAAC,IAAD,CAAMC,IAAI,kBCElBC,EAASC,IAATD,KA4COE,EA1CC,SAAC,GAA4D,IAAD,EAAzD5B,EAAyD,EAAzDA,IAAyD,EAC1C6B,IAAMC,WADoC,mBACjEC,EADiE,KACxDC,EADwD,KAExEH,IAAMI,WAAU,WACZC,MACD,IAEH,IAAMA,EAAY,uCAAG,8BAAA9B,EAAA,sEACM+B,EAAWjC,QAAQ,CAAEF,QAD3B,gBACTW,EADS,EACTA,KACRyB,QAAQC,IAAI1B,GACZqB,EAAWrB,GAHM,2CAAH,qDAUlB,OACI,kBAAC,IAAD,CACIQ,MAAO,CAAEC,MAAO,IAAKE,OAAQ,IAC7BgB,QAASC,SAASR,GAClBS,MAAQT,EAGJ,yBACIU,IAAG,OAAEV,QAAF,IAAEA,OAAF,EAAEA,EAASW,KACdC,IAAG,OAAEZ,QAAF,IAAEA,GAAF,UAAEA,EAASa,eAAX,aAAE,EAAkBC,gBAH3B,kBAAC,EAAD,MAMJC,QAAS,CACL,kBAACC,EAAA,EAAD,CAAiBC,IAAI,YACrB,kBAACC,EAAA,EAAD,CAAcD,IAAI,SAClB,kBAACE,EAAA,EAAD,CAAkBF,IAAI,eAG1B,kBAACtB,EAAD,CACIyB,MAAK,OAAEpB,QAAF,IAAEA,OAAF,EAAEA,EAASW,KAChBU,YAAY,8BClBbC,EArBK,SAAC,GAA6D,IAAD,EAA1DrD,EAA0D,EAA1DA,IAA0D,EAC7C6B,IAAMC,SAAgC,IADO,mBACtEwB,EADsE,KAC5DC,EAD4D,KAE7E1B,IAAMI,WAAU,WACZuB,MACD,IAEH,IAAMA,EAAa,uCAAG,8BAAApD,EAAA,sEACK+B,EAAWjC,QAAQ,CAAEF,QAD1B,gBACVW,EADU,EACVA,KACR4C,EAAY5C,GAFM,2CAAH,qDAInB,OACI,kBAAC,IAAD,CAAK8C,QAAQ,UAAb,UACKH,EAASI,eADd,aACK,EAAkBC,KAAI,gBAAG3D,EAAH,EAAGA,IAAH,OACnB,kBAAC,IAAD,CAAKgD,IAAKY,IAAMC,QACZ,kBAAC,EAAD,CAAS7D,IAAKA,U,uHCdlC,IAAM8D,EAAaC,YAAOC,IAAPD,CAAH,KAeDE,EAVH,WACV,OACE,kBAACH,EAAD,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,CAAa9D,IAAK,yCCZ1BkE,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.25737e5a.chunk.js","sourcesContent":["import axios, { AxiosRequestConfig, AxiosResponse } from \"axios\";\r\n\r\ninterface RequestOptions extends AxiosRequestConfig {\r\n    url?: string;\r\n    path?: string;\r\n}\r\n\r\nclass HttpClient {\r\n    private url: string\r\n    private headers: Headers\r\n\r\n    constructor() {\r\n        this.url = ''\r\n        this.headers = new Headers({ Accept: \"application/json\" });\r\n    }\r\n\r\n    public request = async (options: RequestOptions) => {\r\n        try {\r\n            if (options.url) {\r\n                this.url = options.url\r\n            }\r\n\r\n            const { status = 200, statusText, data }: AxiosResponse = await axios({\r\n                ...options,\r\n                url: options.path ? `${this.url}/${options.path}` : this.url,\r\n                headers: this.headers,\r\n            });\r\n\r\n            const isError = status < 200 || status >= 300;\r\n\r\n            return { status, json: isError ? this.errorHandler(statusText) : data };\r\n        } catch (err) {\r\n            return { status: 500, json: this.errorHandler(err) }\r\n        }\r\n    }\r\n\r\n    private successHandler = () => {\r\n\r\n    }\r\n\r\n    private errorHandler = (statusText: string) => {\r\n        throw new Error(statusText);\r\n    }\r\n}\r\n\r\nexport default new HttpClient()","import React from 'react'\r\nimport { Spin, Space } from 'antd';\r\n\r\nconst Loading = () => {\r\n    return (\r\n        <div style={{ width: '300px', lineHeight: '300px', margin: '0 auto', textAlign: 'center' }}>\r\n            <Space align=\"center\">\r\n                <Spin tip=\"Loading...\">\r\n                </Spin>\r\n            </Space>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Loading","import React from 'react'\r\nimport { Card, Avatar } from 'antd';\r\nimport { EditOutlined, EllipsisOutlined, SettingOutlined } from '@ant-design/icons';\r\n\r\nimport HttpClient from '../apis/HttpClient'\r\nimport * as pokemonTypes from '../models/pokemon'\r\n\r\nimport Loading from './Loading'\r\n\r\nconst { Meta } = Card;\r\n\r\nconst Pokemon = ({ url }: React.PropsWithChildren<pokemonTypes.Pokemon>) => {\r\n    const [pokemon, setPokemon] = React.useState<pokemonTypes.Pokemon>()\r\n    React.useEffect(() => {\r\n        fetchPokemon()\r\n    }, [])\r\n\r\n    const fetchPokemon = async () => {\r\n        const { json } = await HttpClient.request({ url })\r\n        console.log(json)\r\n        setPokemon(json)\r\n    }\r\n\r\n    // if (!pokemon) {\r\n    //     return <Loading />\r\n    // }\r\n\r\n    return (\r\n        <Card\r\n            style={{ width: 300, margin: 16 }}\r\n            loading={Boolean(!pokemon)}\r\n            cover={!pokemon ?\r\n\r\n                <Loading /> :\r\n                <img\r\n                    alt={pokemon?.name}\r\n                    src={pokemon?.sprites?.front_default}\r\n                />\r\n            }\r\n            actions={[\r\n                <SettingOutlined key=\"setting\" />,\r\n                <EditOutlined key=\"edit\" />,\r\n                <EllipsisOutlined key=\"ellipsis\" />,\r\n            ]}\r\n        >\r\n            <Meta\r\n                title={pokemon?.name}\r\n                description=\"This is the description\"\r\n            />\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default Pokemon","import React from 'react'\r\nimport short from 'short-uuid'\r\nimport { Row, Col } from 'antd'\r\n\r\nimport HttpClient from '../apis/HttpClient'\r\nimport * as pokemonTypes from '../models/pokemon'\r\nimport Pokemon from './Pokemon'\r\n\r\nconst PokemonList = ({ url }: React.PropsWithChildren<pokemonTypes.Pokemons>) => {\r\n    const [pokemons, setPokemons] = React.useState<pokemonTypes.Pokemons>({})\r\n    React.useEffect(() => {\r\n        fetchPokemons()\r\n    }, [])\r\n\r\n    const fetchPokemons = async () => {\r\n        const { json } = await HttpClient.request({ url })\r\n        setPokemons(json)\r\n    }\r\n    return (\r\n        <Row justify=\"center\">\r\n            {pokemons.results?.map(({ url }: { url: string }) => (\r\n                <Col key={short.uuid()}>\r\n                    <Pokemon url={url} />\r\n                </Col>\r\n            ))}\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default PokemonList","import React from 'react';\nimport styled from 'styled-components'\nimport { Row, Col } from 'antd'\n\nimport PokemonList from './components/PokemonList'\n\nimport 'antd/dist/antd.css'\n\nconst AppWrapper = styled(Row)`\n  min-width: 360px\n  max-width: 1440px\n`\n\nconst App = () => {\n  return (\n    <AppWrapper>\n      <Col>\n        <PokemonList url={'https://pokeapi.co/api/v2/pokemon'} />\n      </Col>\n    </AppWrapper>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}